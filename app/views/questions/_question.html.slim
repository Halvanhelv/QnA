- cache_unless current_user.try(:admin), ['question_attrs', question] do
  h1= question.title
  p= question.body
  p= question.user.email
- cache_unless current_user.try(:admin), ['question_vote', question] do
  div id="vote-block"
     =render 'shared/votes', resource: question
div class= 'question-subscriptions-block'
   =render 'subscriptions/subscriptions', question: question
- cache_unless current_user.try(:admin), ['question_files', question] do
  -if question.files.attached?
  ul.list-group
    - question.files.each do |file|
      li class="file-item attachment-id-#{file.id} form-control"
        = link_to file.filename, url_for(file)

- cache_unless current_user.try(:admin), ['question_links_and_comments'] do
  .links
     p Links:
     ul
        = render partial: "links/link_without_delete_link", collection: question.links, :as => :link
  .question_comments
     -if question.comments.exists?
        ul.list-group
        =render question.comments
     -else
        span.text-secondary.empty style='font-size: 10pt' 0 comment's
- if signed_in?
   = content_tag(:span, class: 'text-primary comment-button', style: 'font-size: 8pt')
      = link_to t('add comment'), '', class: 'add_comment_button', style: 'text-decoration: none;', remote: true

   =render 'comments/form', resource: question
- cache_unless current_user.try(:admin), ['question_reward', question] do
  #reward
     p Reward:

     -if question.reward
        = question.reward.name
        = image_tag(url_for(question.reward.img), size: 200)
- if %i[edit destroy].any? { |action| can? action, question }
  .actions
    = button_to t('.delete'), question_path(question), method: :delete, class: "action-btn btn btn-outline-danger", form_class: 'inline-form-actions'
    = button_to t('.edit'), '#', class: 'edit-question-link action-btn btn btn-outline-warning', form_class: 'inline-form-actions'




  =render 'form'
#question-errors
